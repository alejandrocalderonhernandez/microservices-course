spring:
  kafka:
    listener:
      ack-mode: manual_immediate
    consumer:
      bootstrap-servers: localhost:9092
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      group-id: circuitbreaker
  datasource:
    username: ${db.username}
    hikari:
      maximum-pool-size:  ${db.maximum-pool-size}
      connection-timeout: ${db.connection-timeout}
    url: ${db.url}
    password: ${db.password}
  application:
    name: companies-crud
  profiles:
    default: default
  config:
    import: "optional:configserver:${CONFIG_SERVER_HOST}"
server:
  servlet:
    context-path: /companies-crud
  port: 0
logging:
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
  level:
    org:
      hibernate:
        SQL: DEBUG
        type:
          descriptor:
            sql:
              BasicBinder: TRACE
eureka:
  instance:
    instance-id: "${spring.application.name}:${random.value}"
  client:
    service-url:
      defaultZone: ${EUREKA_URL}
management:
  tracing:
    enabled: true
    sampling:
      probability: 1.0
  otlp:
    metrics:
      export:
        url: ${OTLP_METRICS_URL}
        step: 10s
    tracing:
      endpoint: ${OTLP_TRACING_URL}
  metrics:
    distribution:
      percentiles:
        do.sleep.method.timed: 0.99, 0.95, 0.9, 0.7, 0.5
        http.server.requests: 0.99, 0.95, 0.9, 0.7, 0.5
      percentiles-histogram:
        do.sleep.method.timed: true
        http.server.requests: true
      minimum-expected-value:
        do.sleep.method.timed: 100ms
        http.server.requests: 100ms
      maximum-expected-value:
        do.sleep.method.timed: 10s
        http.server.requests: 10s
      slo:
        do.sleep.method.timed: 300ms,500ms,1s,2s
        http.server.requests: 300ms,500ms,1s,2s
  endpoints:
    web:
      exposure:
        include: '*'